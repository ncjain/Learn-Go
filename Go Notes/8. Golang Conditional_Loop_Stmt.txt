




## Condition Statements
## Note:
One thing to notice here is that we have written else statement in the same line of ending brace } of the if statement. This is necessary because if we would have written else statement on a new line, Go would have put a semicolon ; at the end of if statement and program would have resulted in an error.
if condition {
}                   // implicit ;
else {
}
error: unexpected newline, expecting { after if clause



# 1. if condition
Unlike most of the programming languages, Go does not allow to wrap the condition inside parenthesis (). False
Unlike JavaScript or C language, {} curly braces are mandatory even if there is only one statement between the {...}.

if condition {
	statements
}

or 
if (condition) {
	statements
}

# 2. if-else condition

if (condition)  {
	true statements
} else {
	false statement
}

# 3. if-else if-else 

if (condition)  {
	true statements
} else if (condition) {
	false statement
} else {
	false statement
}

# 4. Initial statement
You can execute an initial statement(statement can be anything) before if condition evaluates.

if statement; condition {
    ...
}

if a:= 2; (a < 10) {
	fmt.Println("if condition met")
}
if c = a + b ; a < 10 {
	fmt.Println("if condition met")
}
if fmt.Println("Hello if") ; a < 10 {
	fmt.Println("if condition met")
}

# Ternary condition
Go doesn’t support ternary one liners and there is no clear idiomatic way to achive that.

a = 4 > 2 ? True : False
a = True if 4 < 5 else False


## Switch statement

The switch statement takes one input value and matches against many cases. 

1. Unlike C, Go doesn't need a break statement to terminate the case block. case block will terminate as soon as the last statement in the case block executes and so is the switch statement.

1. Duplicate cases (values) are not allowed in Go.


# Type 1:
	finger := 2

	switch finger {
	case 1:
		fmt.Println("Thumb")
	case 2:
		fmt.Println("Index")
	case 3:
		fmt.Println("Middle")
	case 4:
		fmt.Println("Ring")
	case 5:
		fmt.Println("Pinky")
	}
	
# Type 2: Can not have duplicate cases
	finger := 2

	switch finger {
	case 1:
		fmt.Println("Thumb")
	case 2:
		fmt.Println("Index")
	case 1:
		fmt.Println("Middle")
	case 4:
		fmt.Println("Ring")
	case 5:
		fmt.Println("Pinky")
	}
	
output: ./prog.go:13:7: duplicate case 1 in switch previous case at ./prog.go:9:7


# Type 3 default case

	switch finger {
	case 1:
		fmt.Println("Thumb")
	case 2:
		fmt.Println("Index")
	case 3:
		fmt.Println("Middle")
	case 4:
		fmt.Println("Ring")
	case 5:
		fmt.Println("Pinky")
	default:
		fmt.Println("No finger")
	}

# Type 4 The default case does not have to be the last case. It can be anywhere in the switch block.
	switch finger {
	case 1:
		fmt.Println("Thumb")
	case 2:
		fmt.Println("Index")
	default:
		fmt.Println("No finger")
	case 3:
		fmt.Println("Middle")
	case 4:
		fmt.Println("Ring")
	case 5:
		fmt.Println("Pinky")
	}
	
# Type 5 Multiple case values
	letter := "i"
	switch letter {
	case "a", "e", "i", "o", "u":
		fmt.Println("Letter is a vovel.")
	default:
		fmt.Println("Letter is not a vovel.")
	}
	
# Type 6 The initial statement
	switch letter := "i"; letter {
	case "a", "e", "i", "o", "u":
		fmt.Println("Letter is a vovel.")
	default:
		fmt.Println("Letter is not a vovel.")
	}
	
# Type 7 Expressionless switch statement
	number := 20
	switch {
	case number <= 5:
		fmt.Println("number is less than or equal to 5")
	case number > 5:
		fmt.Println("number is greater than 5")
	case number > 10:
		fmt.Println("number is greater than 10")
	case number > 15:
		fmt.Println("number is greater than 15")
	}
	
# Type 8 
	switch number := 20;{
	case number <= 5:
		fmt.Println("number is less than or equal to 5")
	case number > 5:
		fmt.Println("number is greater than 5")
	case number > 10:
		fmt.Println("number is greater than 10")
	case number > 15:
		fmt.Println("number is greater than 15")
	}
Note:  semicolon is necessary after the initial statement because if we don’t add a semicolon, then our switch statement is no longer expressionless and number := getnumber() becomes the input value expression which is invalid.

# Type 9: fallthrough statement
1. When a case condition is evaluated and returns true or matches the input value, that case block is executed. If the compiler finds fallthrough statement, the next case block is executed without even evaluating the case.

	switch number := 20; {
	case number <= 5:
		fmt.Println("number is less than or equal to 5")
		fallthrough
	case number > 5:
		fmt.Println("number is greater than 5")
		fallthrough
	case number > 10:
		fmt.Println("number is greater than 10")
		fallthrough
	case number > 15:
		fmt.Println("number is greater than 15")
	}
	
	
		switch number := 20; {
	case number <= 5:
		fmt.Println("number is less than or equal to 5")
		fallthrough
	case number > 5:
		fmt.Println("number is greater than 5")
		fallthrough
	case number > 10:
		fmt.Println("number is greater than 10")
	case number > 15:
		fmt.Println("number is greater than 15")
	}

2. The fallthrough should be the last statement in a case block, else Go compiler will throw fallthrough statement out of place error.

	switch number := 20; {
	case number <= 5:
		fmt.Println("number is less than or equal to 5")
		fallthrough
	case number > 5:
		fallthrough
		fmt.Println("number is greater than 5")
	case number > 10:
		fmt.Println("number is greater than 10")
	case number > 15:
		fmt.Println("number is greater than 15")
	}
output: .\worksheet.go:40:3: fallthrough statement out of place

3. fallthrough statement is not allowed in last case block as there is no further condition to fall into.
	switch number := 20; {
	case number <= 5:
		fmt.Println("number is less than or equal to 5")
		fallthrough
	case number > 5:
		fmt.Println("number is greater than 5")
	case number > 10:
		fmt.Println("number is greater than 10")
	case number > 15:
		fmt.Println("number is greater than 15")
		fallthrough
	}
	
output: .\worksheet.go:45:3: cannot fallthrough final case in switch

() paraenthesis can be used in cases.

# Type 10: type switch (Read this after completing the interfaces)
func main() { 
    var value interface{}
	value = 2
    switch q:= value.(type) { 
       case bool: 
       fmt.Println("value is of boolean type") 
       case float64: 
       fmt.Println("value is of float64 type") 
       case int: 
       fmt.Println("value is of int type") 
       default: 
       fmt.Printf("value is of type: %T", q) 
         
   } 
} 

func explain(i interface{}) {
	switch i.(type) {
	case string:
		fmt.Println("i stored string ", strings.ToUpper(i.(string))) // i stored string  HELLO WORLD
	case int:
		fmt.Println("i stored int", i) // i stored int 52
	default:
		fmt.Println("i stored something else", i) // i stored something else true
	}
}

func main() {
	explain("Hello World")
	explain(52)
	explain(true)
}

## for loop
for init; condition; post {
    ...
}

# Type 1: simple
	for i:=0 ; i <10 ; i++{
		fmt.Println("Hello Kapil");
	}
	
# Type 2: init optional
	i:=0
	for  ; i <10 ; i++{
		fmt.Println("Hello Kapil");
	}

# Type 3: post optional
	for i:=0 ; i <10 ; {
		fmt.Println("Hello Kapil");
		i++
	}

# Type 4: init and post both optional
	i:=0
	for ;i <10; {
		fmt.Println("Hello Kapil");
		i++
	}

# Type 5: init and post both optional without semi colon
	i:=0
	for i <10 {
		fmt.Println("Hello Kapil");
		i++
	}
	
	i:=0
	for (i < 10) {
		fmt.Println("Hello Kapil");
		i++
	}

# Type 6: init, condition, post all are optional with semi colon
	i:=0
	for ; ;{
		fmt.Println("Hello Kapil");
		i++
		if i == 2{
		break
		}
	}

# Type 7: init, condition, post all are optional without semi colon
	i:=0
	for {
		fmt.Println("Hello Kapil");
		i++
		if i == 2{
		break
		}
	}
	
# Type 8: Empty for{}
import "fmt"
func main(){
	fmt.Println("Start")
	for{}
	fmt.Println("End")
}


# Type 9:
for item := range Chnl { 
     // statements..
}


func main() { 
	
	// using channel 
	chnl := make(chan int) 
	go func(){ 
		chnl <- 100 
		chnl <- 1000 
		chnl <- 10000 
		chnl <- 100000 
		close(chnl) 
	}() 
	for i:= range chnl { 
	fmt.Println(i)
	} 
	
} 


# Type 8: for range
	
	var a [3]int
	a = [3]int{10,11,12}
	
	fmt.Println(a) // [10, 11, 12]
	fmt.Printf("%T",a) //[3]int

# when you use single variable, it return only index or key
	for i := range a{
		fmt.Println(i)
	}
# When you need only value, you can use blank identifier for either index/key or value
	for i, v := range a{
		fmt.Println(v)
	}
	// output: .\worksheet.go:22:6: i declared and not used
	
	for _, v := range a{
		fmt.Println(v)
	}

	for i, _ := range a{
		fmt.Println(i)
	}
	
	for _, _ := range a{
		fmt.Println()
	}
	// output: .\worksheet.go:22:14: no new variables on left side of :=
	
# When you use two variable then it return index/key and value
	b := [3]int{20,21,22}
	for i,v := range b{
		fmt.Println(i,v)
	}
	
	var m map[int]int
	m = map[int]int{1:10,2:20}
	
	fmt.Println(m) // map[1:10 2:20]
	fmt.Printf("%T",m) // map[int]int
	
	for i,v := range m{
		fmt.Println(i,v)
	}
	
	n := map[int]int{1:100,2:200}
	for i,v := range n{
		fmt.Println(i,v)
	}
	
	var s string
	s = "abcde"
	fmt.Println(s) // "abcde"
	fmt.Printf("%T",s) // string
	for i,v := range s{
		fmt.Println(i,v) // 0, 97
	}
	
	s = "ABCDE"
	for i,v := range s{
		fmt.Println(i,v) // 0, 65
	}
	
	var sl []int
	sl = []int{1,2,3}
	fmt.Println(sl)  // [1,2,3]
	fmt.Printf("%T",sl) // []int
	for i,v := range sl{
		fmt.Println(i,v)
	}
	
	sl1 := []int{1,2,3,4}
	for i,v := range sl1{
		fmt.Println(i,v)
	}

# Important Points:

Parentheses are not used around the three statements of a for loop.
The curly braces are mandatory in for loop.
The opening brace should be in the same line in which post statement exists.
If the array, string, slice, or map is empty, then for loop does not give an error and continue its flow. Or in other words, if the array, string, slice, or map is nil then the number of iterations of the for loop is zero.

## break

	i:=0
	for {
		fmt.Println("Hello Kapil");
		i++
		if i == 2{
		break
		}
	}

# continue

	i:=0
	for i < 10{
		i++
		if i == 2{
		continue
		}
		fmt.Println(i);
	}
	
# goto
	a := [3]int{10,11,12}
	for _, i := range a{
		fmt.Println(i)
		if i == 15{
		goto x
		}
	}
	fmt.Println("hi")
	fmt.Println("hi")
	x:
	fmt.Println("hi")
	
