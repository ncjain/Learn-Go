## Go Array
An array is a container that holds data of same type. Arrays in Go have fixed length and they can’t be expanded to fit more data.
An array is a homogeneous data structure (Fix type) and has a fixed-length. The type can be anything like integers, string or self-defined type. 
The items in the array can be accessed through their index, It starts with zero.
It is fixed and must be declared in the declaration of an array variable. 
You are allowed to store duplicate elements in an array.

1. if an array does not initialized explicitly, then the default value of this array is [0,0].
2. an array is of value type not of reference type. So when the array is assigned to a new variable, then the changes made in the new variable do not affect the original array

## Declaration an array

Single Dimentional Array:
var identifier [len]type  

var arr_name [5]int  // [0 0 0 0 0]
var arr_name [0]int  

## Value assignment
In Go language, arrays are mutable.
array_name[index] = element
a[index] = value
a[4] = 50.0 
a[1]
func main() {
	var a [3]int
	a[0] = 1
	a[1] = 2
	a[2] = 3
	fmt.Println("array a => ", a)
	fmt.Println("elements => ", a[0], a[1], a[2])
}

## Muti Dimentional Array:
When array elements of an array are arrays, then it’s called a multi-dimensional array. As from the definition of the array, an array is a collection of same data types and array is a type in itself, a multi-dimensional array must have arrays that belong to the same data type.

var arrayName [ x ][ y ]...[z]variable_type  
var arr_name [3][4]int  
var arr_name [3][0]int  
var arr_name [0][0]int  

var a = [3][3]int{ {1,2,3}, {4,5,6}, {7,8,9}} 
a := [3][3]int{ {1,2,3}, {4,5,6}, {7,8,9}} 
a := [...][2]int{
		[...]int{1, 2},
		[...]int{3, 4},
		[...]int{5, 6},
	}
a := [3][2]int{{1, 2}, {3, 4}, {5, 6}}
a := [...][2]int{{1, 2}, {3, 4}, {5, 6}}
for _, child := range parent {
	for _, elem := range child {
		...
	}
}


## Initailization:
var a [n]T = [n]T{V1,V2,...,Vn}
var arr [3]int = [3]int{1, 2, 3}
You can also drop type from the left-hand statement and Go will infer the type from the array definition.
var a = [3]int{1, 2, 3}
Or you could use shorthand syntax :=, dropping var
a := [3]int{1, 2, 3}
a := [3]int{1, 2}


## Multi-line initial value
You can define an array with initial values over multiple lines but since these values are comma-separated, you need to make sure to add a comma at the end of the last element

greetings := [4]string{
	"Good morning!",
	"Good afternoon!",
	"Good evening!",
	"Good night!", // must have comma
}
we have used comma (,) at the end of last element of the array. This comma is necessary as if it wouldn’t be there, Go would have added a semicolon (;) by the rule which would have crashed the program.


## Automatic array length declaration
Sometimes, we don’t know the length of an array while typing its elements. Hence Go provide ... operator to put in place of n in [n]T array type syntax. Go compiler will find the length on its own. You can only use this operator when you are defining an array with an initial value.
greetings := [...]string{
	"Good morning!",
	"Good afternoon!",
	"Good evening!",
	"Good night!",
}

## Find the length of an array
len(array_name)

## Array comparison
[3]int is different from 
[4]int which is very different from 
[4]string. 
It’s like comparing int == string or apple == orange which is invalid

While 
[3]int can be compared with 
[3]int even if their array elements do not match, because they have the same data type.

Note: For an array to be the equal or the same as the second array, both array should be of the same type, must have the same elements in them and all elements must be in the same order. In that case, ==comparison will be true. If one or more of these conditions do not match, it will return false.

func main() {
	a := [3]int{1, 2, 3}
	b := [3]int{1, 3, 2}
	c := [3]int{1, 1, 1}
	d := [3]int{1, 2, 3}

	fmt.Println("a == b", a == b) // false
	fmt.Println("a == c", a == c) // false
	fmt.Println("a == d", a == d) // true
}

## Array iteration

a := [...]int{1, 2, 3, 4, 5}
for index := 0; index < len(a); index++ {
	fmt.Printf("a[%d] = %d\n", index, a[index])
}
for index, value := range a {
	fmt.Printf("a[%d] = %d\n", index, value)
}
for _, value := range a {
	fmt.Println(value)
}




## Passed by value
func function_name(variable_name [size]type){
// Code
}

When you pass an array to a function, they are passed by value like int or string data type. The function receives only a copy of it. Hence, when you make changes to an array inside a function, it won’t be reflected in the original array.
Why I needed to mention that, because it’s not the case with slice which you will see in upcoming tutorials.
we made some change in the slice which is passed to the function by value will reflect in the slice present outside the function

Array:
func main() {
	var arr = [3]int{1, 2, 3}
	fmt.Println(arr) // [1 2 3]
	change(arr)
	fmt.Println(arr) // [1 2 3]
}
func change(arr [3]int) {
	arr[0] = 10
}

Slice:
func main() {
	var arr = []int{1, 2, 3}
	fmt.Println(arr)
	change(arr)
	fmt.Println(arr)
}
func change(arr []int) {
	arr[0] = 10
}

Note: We can not pass array into slic or vice versa..

# copying an array:
If we create a copy of an array by value and made some changes in the values of the original array, then it will not reflect in the
copy of that array. And if we create a copy of an array by reference and made some changes in the values of the original array, then 
it will reflect in the copy of that array.
// creating a copy of an array by value
arr := arr1

// Creating a copy of an array by reference
arr := &arr1


