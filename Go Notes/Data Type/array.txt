## Go Array
An array is a homogeneous data structure (Fix type) and has a fixed-length. The type can be anything like integers, string or self-defined type.

1. The items in the array can be accessed through their index, It starts with zero.
2. It is fixed and must be declared in the declaration of an array variable. 
3. You are allowed to store duplicate elements in an array.

1. if an array does not initialized explicitly, then the default value of this array is [0,0].
2. an array is of value type not of reference type. So when the array is assigned to a new variable, then the changes made in the 
new variable do not affect the original array



## Declaration

Single Dimentional Array:
Syntax: var identifier [len]type  

var arr_name [5]int  // [0 0 0 0 0] It's not a nil array
var arr_name [0]int  // []


Example 1:
package main
import "fmt"
func main(){
	var arr [3]int
	fmt.Println(arr)
}

Output:
[0 0 0]



## Assignment
In Go language, arrays are mutable.
array_name[index] = element

Example 2:
package main
import "fmt"
func main() {
	var a [3]int
	fmt.Println(a)
	a[0] = 1
	a[1] = 2
	a[2] = 3
	fmt.Println(a)
	fmt.Println(a[0], a[1], a[2])
}

Output:
[0 0 0]
[1 2 3]
1 2 3



## Initailization:
var a [n]T = [n]T{V1,V2,...,Vn}

var arr [3]int = [3]int{1, 2, 3}
var a = [3]int{1, 2, 3}
a := [3]int{1, 2, 3}
a := [3]int{1, 2}


Multi-line initialization:
You can define an array with initial values over multiple lines but since these values are comma-separated, you need to make sure to 
add a comma at the end of the last element

greetings := [4]string{
	"Good morning!",
	"Good afternoon!",
	"Good evening!",
	"Good night!", // must have comma
}
Note : we have used comma (,) at the end of last element of the array. This comma is necessary as if it wouldn’t be there, Go would 
have added a semicolon (;) by the rule which would have crashed the program.



## Automatic array length declaration:
Sometimes, we don’t know the length of an array while typing its elements. Hence Go provide ... operator to put in place of n in [n]T 
array type syntax. Go compiler will find the length on its own. You can only use this operator when you are defining an array with an
initial value.

greetings := [...]string{
	"Good morning!",
	"Good afternoon!",
	"Good evening!",
	"Good night!",
}

Example 3:
package main
import "fmt"
func main() {
	var a = [...]int{1,2,3}
	fmt.Println(a)
	fmt.Printf("%T",a)
}

Output:
[1 2 3]
[3]int


## Find the length of an array
len(array_name)



## Array comparison
[3]int is different from 
[4]int which is very different from 
[4]string. 
It’s like comparing int == string or apple == orange which is invalid
While 
[3]int can be compared with 
[3]int even if their array elements do not match, because they have the same data type.

Note: For an array to be the equal or the same as the second array, both array should be of the same type, must have the same elements
in them and all elements must be in the same order. In that case, == comparison will be true. If one or more of these conditions do not 
match, it will return false.

Example 4:
package main
import "fmt"
func main() {
	a := [3]int{1, 2, 3}
	b := [3]int{1, 3, 2}
	c := [3]int{1, 1, 1}
	d := [3]int{1, 2, 3}

	fmt.Println(a == b)
	fmt.Println(a == c)
	fmt.Println(a == d)
}

Output:
false
false
true



## Iteration

Example 5:
package main
import "fmt"
func main(){
	a := [...]int{1, 2, 3, 4, 5}
	for index := 0; index < len(a); index++ {
		fmt.Printf("a[%d] = %d\n", index, a[index])
	}
	for index, value := range a {
		fmt.Printf("a[%d] = %d\n", index, value)
	}
	for _, value := range a {
		fmt.Println(value)
	}
}

Output:
a[0] = 1
a[1] = 2
a[2] = 3
a[3] = 4
a[4] = 5
a[0] = 1
a[1] = 2
a[2] = 3
a[3] = 4
a[4] = 5
1
2
3
4
5



## Passed by value 
Note: When you pass an array to a function, they are passed by value like int or string data type. The function receives only a copy of 
it. Hence, when you make changes to an array inside a function, it won’t be reflected in the original array. Why I needed to mention 
that, because it’s not the case with slice which you will see in upcoming tutorials. we made some change in the slice which is passed to 
the function by value will reflect in the slice present outside the function


Example 6: Array
package main
import "fmt"
func main() {
	var arr = [3]int{1, 2, 3}
	fmt.Println(arr) // [1 2 3]
	change(arr)
	fmt.Println(arr) // [1 2 3]
}
func change(arr [3]int) {
	arr[0] = 10
}

Output:
[1 2 3]
[1 2 3]


Example 7: Slice
package main
import "fmt"
func main() {
	var arr = []int{1, 2, 3}
	fmt.Println(arr)
	change(arr)
	fmt.Println(arr)
}
func change(arr []int) {
	arr[0] = 10
}

Output:
[1 2 3]
[10 2 3]


Note: We can not pass array into slic or vice versa..



## Muti Dimentional Array:
When array elements of an array are arrays, then it’s called a multi-dimensional array.


Declaration:
var arrayName [ x ][ y ]...[z]variable_type  
var arr_name [3][4]int  
var arr_name [3][0]int  
var arr_name [0][0]int  

Initialization:
a := [3][3]int{ {1,2,3}, {4,5,6}, {7,8,9}} 
a := [...][2]int{
		[...]int{1, 2},
		[...]int{3, 4},
		[...]int{5, 6},
	}

Iteration:
for _, child := range parent {
	for _, elem := range child {
		...
	}
}


# copying an array: (Need to verify)
If we create a copy of an array by value and made some changes in the values of the original array, then it will not reflect in the
copy of that array. And if we create a copy of an array by reference and made some changes in the values of the original array, then 
it will reflect in the copy of that array.
// creating a copy of an array by value
arr := arr1

// Creating a copy of an array by reference
arr := &arr1
