1. Struct is a user-defined data types.
2. Struct is a composite type means it can have different properties and each property can have their own type and value.
3. Struct can represent real-world entity with these properties. We can access a property data as a single entity. 

## Declaration:
type StructName struct {
    field1    fieldType1    `meta-data`
    field2    fieldType2    `meta-data`
    ...
    fieldN    fieldTypeN    `meta-data`
}

Note 1: there can be any number of spaces between fieldname and data type and meta-data. 

# Valid Examples:
1. Not fix length spaces between field name and data type
type Employee struct {
	FirstName  string
	LastName     string
	Salary int
	FullTime           bool
}

2. Put similar data types fields in same line seperated by comma
type Employee struct {
	FirstName, LastName string
	Salary int
	FullTime bool
}

3. With semi colon
type Employee struct {
	FirstName string;
	LastName string;
	Salary int;
	FullTime bool;
}

4. Without semi colon
type Employee struct {
	FirstName string
	LastName string
	Salary int
	FullTime bool
}

5. Not mandatory to put curly brcket in same line
type Employee struct 
{
	FirstName string
	LastName string
	Salary int
	FullTime bool
}

type Employee struct 
{	FirstName string
	LastName string
	Salary int
	FullTime bool}


6. All field in same line with semicolon
type Employee struct { FirstName string; LastName string; Salary int; FullTime bool;}
type Employee struct { FirstName string; LastName string; Salary int; FullTime bool}

7. With meta data
type Employee struct {
	FirstName   string   `json:"firstName"`
	LastName    string   `json:"lastName"`
	Salary      int      `json: "salary"`
	FullTime    int      `json: "fullTime"`
}

8. Standard
type Employee struct { 
	FirstName     string 
	LastName      string
	Salary        int
	Fulltime      bool
}

# Invalid Examples:
type Employee struct {
	FirstName string,
	LastName string,
	Salary int,
	FullTime bool,
}



## Object creation(Initialization):
var variable_name = structure_variable_type {value1, value2...valuen}
or
variable_name := structure_variable_type {value1, value2...valuen}


# Valid Examples:

1. Values seperated by comma (Without declaring the field names)
var e1 = Employee{"Kapil", "Jain", 12000, true}

Note: when creating a struct without declaring the field names, you need to provide all field values in the order of their appearance in the struct type

2. Values seperated by comma (With declaring the field names)
var e1 = Employee{LastName : "Jain", FirstName : "Kapil", Salary: 12000, Fulltime: true} // {Kapil Jain 12000 true}

Note: Order of appearance of the fields does not matter when creating object with fieldnames

3. 
var e1 = Employee{
	LastName : "Jain", 
	FirstName : "Kapil", 
	Salary: 12000, 
	Fulltime: true, // comma is mandatory at after last fields
}
The comma (,) is absolutely necessary after the value assignment of the last field while creating a struct using the above syntax. This way, Go won’t add a semicolon just after the last field while compiling the code.

otherwise it will throw error
syntax error: unexpected newline, expecting comma or }

4. 
var e = Employee{
}
	e.LastName = "Jain" 
	e.FirstName = "Kapil" 
	e.Salary = 12000
	e.Fulltime = true
default value: { "" "" 0 false}

5. var e Employee  // default value {0 0}
	e.LastName = "Jain" 
	e.FirstName = "Kapil" 
	e.Salary = 12000
	e.Fulltime = true
   
default value: { "" "" 0 false}

6. You can also initialize only some fields of a struct and leave others to their zero values.
var e = Employee{
	LastName : "Jain", 
	FirstName : "Kapil", 
}
output: {Kapil Jain 0 false}
// Salary:0 and Fulltime: false are implicit

7. Pointer to a struct
var e = &Employee{
	LastName : "Jain", 
	FirstName : "Kapil", 
	Salary: 12000, 
	Fulltime: true,
}
fmt.Println(e) // &{Kapil Jain 12000 true}
fmt.Println(*e) // {Kapil Jain 12000 true}
fmt.Println(e.FirstName) // Kapil
fmt.Println((*e).FirstName) // Kapil

Note: You can refer field in both ways either *e or e dot fieldname

8. similar to 7
ep := new(Employee)

ep.LastName = "Jain" 
ep.FirstName = "Kapil" 
ep.Salary = 12000
ep.Fulltime = true

fmt.Println(ep) // &{ kapil jain 0 false}
fmt.Println(*ep) // { kapil jain 0 false}
fmt.Println(ep.FirstName) // Kapil
fmt.Println((*ep).FirstName) // Kapil


Note: 
1. lat will not be exported outside the package since first char is in small case
type Vertex struct{lat , Long float64}

2. We can define struct inside the function


## Accessing and Assignmennt: 
To access any member of a structure, we use the member access operator dot (.)
struct_variable.attribute = value

func main() {
	type Vertex struct{
		Lat, Long float64
	}
	var v Vertex
	fmt.Println(v) // {0 0}
	v.Lat=10
	fmt.Println(v) // {10 0}
}


## Anonymous struct
An anonymous struct is a struct with no explicitly defined struct type alias. In case of an anonymous struct, we do not define any struct type alias and create struct from inline struct type and initial values defined in the same syntax.

This is useful when you don’t want to re-use a struct type.

func main() {
	monica := struct {
		FirstName, LastName string
		Salary              int
		FullTime            bool
	}{
		FirstName: "Monica",
		LastName:  "Geller",
		Salary:    1200,
	}
	fmt.Println(monica)
}


Using fmt.Printf and %T format syntax, we got the following result
struct { firstName string; lastName string; salary int; fullTime bool }


## Anonymous fields
You can define a struct type without any field names. You can just mention the field types and Go will use type as a field name.
type Data struct {
	string
	int
	bool
}

func main() {
	sample1 := Data{"Monday", 1200, true}
	sample1.bool = false
	fmt.Println(sample1.string, sample1.int, sample1.bool)//Monday 1200 false
}


## You are allowed to mix some anonymous fields with named fields like below
type Employee struct {
	firstName, lastName string
	salary              int
	bool
}

Note: Can not have two field with same data type if they both are anonymous.


# Invalid struct
type Data struct {
	string
	string
	int
	bool
}
func main() {
	sample1 := Data{"Monday","Hi", 1200, true}
	sample1.bool = false
	fmt.Println(sample1.string, sample1.int, sample1.bool)
}
./prog.go:7:2: duplicate field string
./prog.go:16:21: ambiguous selector sample1.string



## Embedded(Nested) Struct :
Struct is a data type and can be used as an anonymous field (having only the type). One struct can be inserted or "embedded" into other struct.
It is a simple 'inheritance' which can be used to implement implementations from other type or types.

Example 1:
type Person struct {  
   Fname string  
   Lname string}  
type Employee struct {  
   Person                                                          // Valid
   EmpId int  
}
func main() {
	p1 := Person{ Fname : "Kapil", Lname : "Jain" }
	e1 := Employee{ Person : p1, EmpId : 11}
	fmt.Println(e1) // {{Kapil Jain} 11}
	fmt.Println(e1.Person) // {Kapil Jain}
	fmt.Println(e1.Person.Fname) // Kapil
	
	p2 := Person{ Fname : "Tik", Lname : "Toi" }
	e1.Person = p2
	fmt.Println(e1) // {{Tik Toi} 11}
	fmt.Println(e1.Person) // {Tik Toi}
	fmt.Println(e1.Person.Fname) // Tik
}

Note: If a nested anonymous struct has a same field (field name) as in the parent struct, then inner struct field won’t get promoted. Only non-conflicting fields will get promoted.

Example 2:
type Salary struct {
	basic     int
	insurance int
	allowance int
}
type Employee struct {
	firstName, lastName string
	salary              Salary                                            // Valid
	bool
}
func main() {
	ross := Employee{
		firstName: "Ross",
		lastName:  "Geller",
		bool:      true,
		salary:    Salary{1100, 50, 50},
	}
	fmt.Println("Ross's basic salary", ross.salary.basic)
}



## Promoted Fields:
when we use an anonymous nested struct, all the nested struct fields are automatically available on parent struct. This is called field promotion.

type Salary struct {
	basic     int
	insurance int
	allowance int
}
type Employee struct {
	firstName, lastName string
	Salary
}
func main() {
	ross := Employee{
		firstName: "Ross",
		lastName:  "Geller",
		Salary:    Salary{1100, 50, 50},
	}
	ross.basic = 1200
	ross.insurance = 0
	ross.allowance = 0
	fmt.Println("Ross's basic salary", ross.basic)          // Valid
	fmt.Println("Ross's basic salary", ross.Salary.basic)   // Valid
	fmt.Println("Ross is", ross)
}



## Exported fields
any variable or type that starts with an uppercase letter is exported from that package. we can also control which fields of an exported
struct are visible outside the package (or exported). To export the field names of a struct, we’ve to follow the same uppercase letter 
approach.

# Unexported field
// employee.go
package org
type Employee struct {
	FirstName, LastName string
	salary              int
	fullTime            bool
}

// main.go
package main
import (
	"fmt"
	"org"
)
func main() {
	ross := org.Employee{
		FirstName: "Ross",
		LastName:  "Geller",
		salary:    1200,
	}	fmt.Println(ross)
}

Above program won’t compile and the compiler will throw below error.
unknown field 'salary' in struct literal of type org.Employee

# Exported field
/ main.go
package main
import (
	"fmt"
	"org"
)
type Employee org.Employeefunc main() {
	ross := Employee{
		FirstName: "Ross",
		LastName:  "Geller",
	}	fmt.Println(ross)
}
Above program yields below result
{Ross Geller 0 false}


When we import any struct from another package, we get struct type as it is, just that we don’t have any control over unexported fields.
This is useful when you want to protect some fields but still make them useful as the default or constant values or perhaps something 
complex

What will happen in the case of a nested struct?
A nested struct must also be declared with an uppercase letter so that other packages can import it.
Nested struct fields starting with an uppercase letter are exported.
If a nested struct is anonymous, then its fields starting with an uppercase letter will be available as promoted fields.



## Function fields

If you remember function as type and function as value topics from functions lesson, you can pretty much guess that struct fields can also be functions.

type FullNameType func(string, string) string

type Employee struct {
	FirstName, LastName string
	FullName            FullNameType
}
func main() {
	e := Employee{
		FirstName: "Ross",
		LastName:  "Geller",
		FullName: func(firstName string, lastName string) string {
			return firstName + " " + lastName
		},
	}
	fmt.Println(e.FullName(e.FirstName, e.LastName)) // Ross Geller
}



## struct comparison

Two structs are comparable if they belong to the same type and have the same field values.

type Employee struct {
	firstName, lastName string
	salary              int
}
func main() {
	ross := Employee{
		firstName: "Ross",
		lastName:  "Geller",
		salary:    1200,
	}
	rossCopy := Employee{
		firstName: "Ross",
		lastName:  "Geller",
		salary:    1200,
	}
	fmt.Println(ross == rossCopy) // True
}

However, if a struct has field type which is not comparable, for example, map which is not comparable, then the struct won’t be comparable. For example, if Employee struct type had leaves field of type map, we could not do the above comparison.

type Employee struct {
	firstName, lastName string
	salary              int
	leaves              map[string]int
}


## Pointers to Struct:
Instead of creating a struct, we can create a pointer which points to the struct in one statement. This saves one step to create a struct (variable) and then create a pointer to that variable.
The syntax to create a pointer struct is
s := &StructType{...}

or

var struct_pointer *Person
struct_pointer = &Person1;

Note: To access the members of a structure using a pointer to that structure
struct_pointer.title;
(*struct_pointer).title;

ross := &Employee{
	firstName: "ross",
	lastName:  "Bing",
	salary:    1200,
	fullTime:  true,
}

fmt.Println("firstName", (*ross).firstName)
fmt.Println("firstName", ross.firstName)
both are valid,  We can access the fields of a struct pointer without dereferencing it first. Go will take care of dereferencing a pointer under the hood.



## Structures as function arguments:
type Employee struct {
	firstName   string
	lastName    string
	salary      int
}

ross := Employee{
	firstName: "Ross",
	lastName:  "Geller",
	salary:    500,
}


1. Call by value
func ChangeName( e Employee ) {
	e.firstName = "Kapil"
}

fmt.Println(ross)                                                            // {Ross Geller 500}
ChangeName(ross)
fmt.Println(ross)                                                            // {Ross Geller 500}


2. Call by reference
func ChangeName( e *Employee ) {
	(*e).firstName = "Kapil" // e.firstName = "Kapil"
}

fmt.Println(ross)                                                            // {Ross Geller 500}
ChangeName(&ross)
fmt.Println(ross)                                                            // {Kapil Geller 500}


## Structures as method Arguments: 
1. Value receiver
func (e Employee) ChangeName() {
	e.firstName = "Kapil"
}

fmt.Println(ross)                                                             // {Ross Geller 500}
ross.ChangeName()
fmt.Println(ross)                                                             // {Ross Geller 500}

2. Pointer receiver
func (e *Employee) ChangeName() {
	(*e).firstName = "Kapil" // e.firstName = "Kapil"
}

fmt.Println(ross)                                                               // {Ross Geller 500}
ross.ChangeName() // (&ross).ChangeName()
fmt.Println(ross)                                                               // {Kapil Geller 500}



## struct field meta-data

Struct gives one more ability to add meta-data to the fields. Usually, it is used to provide transformation info on how a struct field is encoded to or decoded from another format (or stored/retrieved from a database), but you can use it to store whatever meta-info you want to, either intended for another package or for your own use.

This meta information is defined by string literal (read strings lesson) like below

type Employee struct {
	firstName string `json:"firstName"`
	lastName  string `json:"lastName"`
	salary    int    `json: "salary"`
	fullTime  int    `json: "fullTime"`
}

In the above struct, we are using struct type Employee for JSON encoding/decoding purpose. You will learn more struct meta-data in upcoming lessons like json, validation and others.
