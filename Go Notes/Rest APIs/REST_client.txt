	MethodGet     = "GET"
	MethodHead    = "HEAD"
	MethodPost    = "POST"
	MethodPut     = "PUT"
	MethodPatch   = "PATCH" // RFC 5789
	MethodDelete  = "DELETE"
	MethodConnect = "CONNECT"
	MethodOptions = "OPTIONS"
	MethodTrace   = "TRACE"


	url := fmt.Sprintf("https://mall.shopee.tw/api/v2/search_items/?by=pop&is_buyer_perspective=1&limit=%s&match_id=%s&newest=%s&order=desc&page_type=shop", strconv.Itoa(size), userID, strconv.Itoa(offset))
	req, _ := http.NewRequest("GET", url, nil)
	res, err := http.DefaultClient.Do(req)
	protoReq, _ := proto.Marshal(rawReq)
	req, err := http.NewRequest("POST", httpAddress+"dogs/1.2/get-bundle-pricing/", bytes.NewReader(protoReq))
	q := req.URL.Query()
q.Add("user_id", req.UserID.String)
	//q.Add("api_key", "key_from_environment_or_flag")
	req.URL.RawQuery = q.Encode()
	client := &http.Client{}
	httpResp, err := client.Do(req)
	if err != nil {
		log.Fatalf("error: %v", err)
	}

	jsonDecoder := json.NewDecoder(httpResp.Body)
	if err := jsonDecoder.Decode(resp); err != nil {
		span.SetTag("error", err.Error())
	}


	params := url.Values{}
	params.Add("user_id", userID)
	httputils.AddQueryParams(httpReq, params)

body := bytes.NewBuffer(b)
	httpReq, err := http.NewRequest(http.MethodPost, apiURL, body)
	if err != nil {
		return nil, errors.Wrap(err, "")
	}
	httpReq.Header.Set("Authorization", c.djConfig.InternalAPIKey)
	httpReq.Header.Set("Content-Type", "application/json")
	httpResp, err := httputils.GetClient(name).Do(ctx, name, httpReq)
	if err != nil {
		return nil, errors.Wrap(err, "")
	}
	defer httpResp.Body.Close()

	if httpResp.StatusCode != 200 {
		return nil, errorutils.WrapErrorWithHTTPStatus(
			ctx,
			errors.New(httputils.MakeHTTPErrorMessage(name, httpResp.StatusCode)),
			httpResp.StatusCode, "")
	}
	buf := new(bytes.Buffer)
	resp := new(CustomBulkGetUsersResponse)
	buf.ReadFrom(httpResp.Body)
	err = json.Unmarshal(buf.Bytes(), resp)
	if err != nil {
		fmt.Println(string(buf.Bytes()))
		return nil, errors.Wrap(err, "")
	}
	return resp, nil



func (c *internalClient) GetCarousellUserWithAuth(token string) (carousell.CarousellUser, int) {
	// honestly not sure whats the point of this
	url := fmt.Sprintf("https://api.carousell.com/api/2.0/helper/user/%s/", userID)
	req, _ := http.NewRequest("GET", url, nil)
	req.Header.Add("Authorization", "Iwn55O6N7rOWyepXck7UfcmgMlhjUxUoR8vJ2mC626emECaYp6JywZEtmiKGEm7")
	url := fmt.Sprintf("https://" + "api.carousell.com" + "/api/2.0/me/") // consul this
	req, _ := http.NewRequest("GET", url, nil)
	req.Header.Add("Authorization", "Bearer "+token)
	res, _ := http.DefaultClient.Do(req)

	var CarousellUser carousell.CarousellUser

	if res.StatusCode == 200 {
		defer res.Body.Close()
		fmt.Printf("%v", res.Body)
		json.NewDecoder(res.Body).Decode(&CarousellUser)
	}

	return CarousellUser, res.StatusCode
}

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"

)

var (
	productInfoEndpoint      = "/api/2.5/services/internal/visibility/product/%d/"
	purchaseEndpoint         = "/api/2.5/services/internal/visibility/buy/"
	productThumbnailEndpoint = "/api/2.6/internal/product/thumbnail/"
	subscriptionsEndpoint    = "/api/1.0/subscriptions/me/"
	touchPointEndpoint       = "/api/2.5/services/visibility/touch_point/user/%s/country/%s/collection/%s/"
	isFTBEndpoint            = "/api/2.5/services/user/%s/tag/ftb/"
	authEndpoint             = "/api/2.0/helper/authenticate/"
	httpTimeout              = time.Second * 10
	httpRetries              = 2
)

//go:generate gen_interface_mock.sh DjangoHTTPClient
type DjangoHTTPClient struct {
	HTTPClientManager httpwrapper.IClientManager `inject:"HTTPClientManager"`
}

func (d *DjangoHTTPClient) GetProductInfo(ctx context.Context, productID int64) (productInfo *ProductInfo, err error) {
	url := fmt.Sprintf(config.DjangoScheme()+config.DjangoHost()+productInfoEndpoint, productID)
	req, err := http.NewRequest(http.MethodGet, url, nil)
	req.Header.Add(auth.HeaderAuthorization, config.DjangoInternalAPIKey())

	httpClient := d.HTTPClientManager.GetClient(httpTimeout, true)
	resp, err := httpClient.DoWithRetry(ctx, "Django.GetProductInfo", req, httpRetries)
	if err != nil {
		err = errors.ServerError(err, req)
		return
	}

	if resp.StatusCode != 200 {
		if resp.StatusCode == 404 {
			err = ErrorProductNotFound
		} else {
			err = errors.ServerError(ErrorUnknownDjangoError, req, string(resp.Body))
		}
		return
	}

	err = json.Unmarshal(resp.Body, &productInfo)
	if err != nil {
		err = errors.ServerError(err, req, string(resp.Body))
	}
	return
}


		{http.MethodGet, true},
		{http.MethodPost, false},
		{http.MethodPut, false},

	requestData := &BearerTokenRequest{
		ApiKey: o.Config.ApiKey,
	}

	requestDataJson, err := json.Marshal(requestData)
	if err != nil {
		err = errors.Wrap(err, "Error marshalling requestData AXA Bearer Token")
		return
	}

	req, err := http.NewRequest(http.MethodPost, o.Config.Host+AuthEndPoint, bytes.NewBuffer(requestDataJson))
	if err != nil {
		err = errors.Wrap(err, "Error createing new httprequest AXA Bearer Token")
		return
	}
	req.Header.Add("Authorization", "Bearer "+bearerToken)
	req.Header.Add("Content-Type", "application/json")

	httpClient := o.HTTPClientManager.GetClient(time.Duration(o.Config.TimeoutMS)*time.Millisecond, true)

	httpResp, err := httpClient.DoWithRetry(ctx, "GetAXAQuote", req, o.Config.Retries)
	if err != nil {
		err = errors.Wrap(err, "Error createing new httpdowithretry getaxaquote AXA Bearer")
		return
	}

	bearerToken = string(httpResp.Body)
	log.Info(ctx, "Get AXA Quote Response", string(httpResp.Body))

	resp = &QuoteResponse{}

	err = json.Unmarshal(httpResp.Body, resp)
	if err != nil {
		err = errors.Wrap(err, "Error Unmarshalling AXA Quote Response Body")
		return
	}
	if resp.StatusCode == 400 {
		err = errors.New("Quote not available. Please check your input.")
		return
	}
	if resp.Error != nil {
		err = errors.New("Make Order failed")
		return
	}
	if resp.Result != "OK" {
		err = errors.New(resp.Message)
	}


req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

errors.ServerError(err, req)
	if resp.StatusCode != 200 {
		if resp.StatusCode == 400 {
			err = ErrorBadRequest
		} else {
			err = errors.ServerError(ErrorUnknownDjangoError, req, string(resp.Body))
		}
		return
	}
	err = json.Unmarshal(resp.Body, &purchaseInfo)
	if err != nil {
		err = errors.ServerError(err, req, string(resp.Body))
	}
	return



	req, err := http.NewRequest(http.MethodGet, config.DjangoScheme()+config.DjangoHost()+productThumbnailEndpoint, nil)
	req.Header.Add(auth.HeaderAuthorization, config.DjangoInternalAPIKey())

	query := req.URL.Query()
	for _, id := range productIDs {
		query.Add("id", strconv.FormatInt(id, 10))
	}
	req.URL.RawQuery = query.Encode()



httpRequest, err := http.NewRequest("GET", finalURL, nil)
if err != nil {
	log.Fatalln(err)
	return response, errors.Wrap(err, "")
}
httpRequest = httpRequest.WithContext(ctx)
httpRequest.Header.Add("Authorization", o.config.DjangoAPIKey)
type Client struct {
	config     ClientConfig
	httpClient *http.Client
}
o *Client
httpResponse, err := o.do(ctx, validateUserName, httpRequest, o.config.DjangoRetries)
if err != nil {
		return response, errors.Wrap(err, "")
	}
defer httpResponse.Body.Close()


package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "http://127.0.0.1:8080/api/setuser/"

	payload := strings.NewReader("{\n    \"firstname\": \"rohit\",\n    \"lastname\": \"pawar\"\n}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("Content-Type", "application/json")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}



	url := "http://127.0.0.1:8080/api/getuser/?firstname=rohit"

	req, _ := http.NewRequest("GET", url, nil)





	url := "http://10.53.19.214:8001/api/2.0/email-permissions/?test=param"

	payload := strings.NewReader("------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"test\"\r\n\r\nform\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW")





	url := "https://icetea.carousell.com/api/2.0/helper/user/23750/verify/"

	payload := strings.NewReader("------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"mobile\"\r\n\r\n+639975526176\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW")
	req.Header.Add("Authorization", "Iwn55O6N7rOWyepXck7UfcmgMlhjUxUoR8vJ2mC626emECaYp6JywZEtmiKGEm7")

	url := "http://localhost:8000/polls/api/users/266/"

	req, _ := http.NewRequest("DELETE", url, nil)

	req.Header.Add("Authorization", "1234")
	req.Header.Add("Accept", "application/xml")
	req.Header.Add("Content-Type", "application/xml")