Zero value:
Unlike other programming languages where variables hold null or undefined values when not initialized with any value, Go gives them zero-value of their respective types. As from the above table, boolean gets false value and integer gets 0 value and string have empty string "" and error have nil.


## Declaring a variable
To declare a single variable, you must follow the following syntax.
Note: initialValue is optional. If you do not give initial value to variable assignment, it will hold zero-value of its data type.

var variableName dataType = initialValue

var integer1 int = 15
var integer2 int8 = -25
var integer3, integer4 int32 = 3, 4
var integer5 int32
var float1 float32 = 63.2
var string1 string = "Hello World!"
var boolean1 bool
var boolean2 bool = true/false

You can also drop data type and let Go use type inference to guess data type. This way you can declare multiple data types variable on a single line
var var1, var2, var3 = 1, 2.2, fal

## Type inference
Even when Go is statically typed language, Go provide us ease to eliminate declaration of data type while declaring a variable. You can drop data type from variable declaration like below

var variableName = initialValue

Go will pick up data type from the initialValue. Hence this syntax will only work when you are assigning some initial value to a new variable.

var integer1 = 52 //int
var string1 = "Hello World" //string
var boolean1 = false //bool


## Short-hand notation
Go also provide one shorthand syntax to declare a variable. In this syntax, you can drop var and dataType.

variableName := initialValue

Go when finds := assignment syntax, it understands that new variable needs to be declared with an initial value.

integer1 := 52 //int
string1 := "Hello World" //string
boolean1 := false //bool

The shorthand notation syntax := can only be used inside the function body. Also, it can only be used when at least one of the variables on the left side of := is newly declared.
Shorthand syntax will come in handy when new variable declares will get value at run-time, for example, a value receives from the function call (example below).

package mainimport (  
    "fmt"
    "math"
)func main() {  
    a, b := 145.8, 543.8
    c := math.Min(a, b)
    fmt.Println("minimum value is ", c)
}


## You can also use multiple lines to declare a variable of different types with a single use of var keyword

var(
    var1 = 50
    var2 = 25.22
    var3 string = "Telefonía"
    var4 bool
)


## Type conversion

In Go, you can not add, subtract (or do any kind of mathematical) operation on variables to two different data types. Hence variables first must be converted to the same data type. In Go, this is very simple. Just wrap any variable inside parenthesis with data type prefix that you want to convert that variable into. The syntax to convert data to a type is type(var).

var1 := 10 // int
var2 := 10.5 // float// illegal 
// var3 := var1 + var2// legal
var3 := var1 + int(var2) // var3 == 20

Note: Type conversion is very important when variable of different types are used in mathematical expression. Go does not allow variables of different types to be used as operand in mathematical expression.






## Type aliasing
You can pretty much declare alias to any built-in or user-defined type using a simple syntax

type aliasName aliasTo
type float float64

package main
import "fmt"
type float float64
func main() {
	var f float = 52.2	
	fmt.Printf("f has value %v and type %T", f, f)
}
Above program prints main.float because float is a custom type and it must belong to a package. Type can be defined anywhere in the program, like in a function or a condition block.
If you define a type alias with the initial letter in small caps, then it won’t be exported from the package and other packages won’t be able to use it.
Also, in the above program, float won't be comparable to float64 as even they share the same properties, they still are different types. Hence if you define two variables with these types, they won't be comparable.
invalid operation: f == g (mismatched types float and float64)



## Constant
1. Constant is a variable in Go with a fixed value. Any attempt to change the value of a constant will cause a run-time panic. Constant must be declared with const keyword and an initial value.data_type is optional as go will infer data type from fixed_value.

const const_name [data_type] = fixed_value
const PI float32 = 3.14

2. Note: In Go, constant value must be known during compile time. If you are trying to assign value returned by a function call, that won’t work. const a = math.Sqrt(4) is an illegal statement as value of a is computed during run time.

const const_1, const_2 = value_1, value_2

or 
const(
    const_1 = value_1
    const_2 = value_2
)

3. In a parenthesized const declaration expressions can be implicitly repeated -this indicates a repetition of the preceding expression.

const(
	a = 1 // a == 1
	b = 2 // b == 2
	c     // c == 2
	d     // d == 2
)

4. iota: Go provides a keyword iota that can be used when declaring enumerated constants. This keyword yields an incremented value by 1 starting from 0, each time it is used.

const(
    a = iota // a == 0
    b = iota // b == 1
    c = iota // c == 2
    d        // d == 3 (implicitely d = iota)
)


5. Use _ (blank identifier) to skip a value. _ will receive the value of iota + 1 but will save the value to garbage.

const (
	a = iota + 1 // a == 1
	_            // (implicitly _ = iota + 1 )
	b            // b == 3 (implicitly b = iota + 1 )
	c            // c == 4 (implicitly c = iota + 1 )
)



------------------------------------------------------------------------------------------------------------------------------------
# Note: gofmt is a tool that automatically formats Go source code, which can be helpful to write Go idiomatically.


## Data Type:
Boolean
1. bool: true or false (zero value is false)

Integer 0
1. uint8   0 to + 2^n - 1
Unsigned 8-bit integers (0 to 255)
2. uint16
Unsigned 16-bit integers (0 to 65535)
3. uint32
Unsigned 32-bit integers (0 to 4294967295)
4. uint64
Unsigned 64-bit integers (0 to 18446744073709551615)

5. int8  - 2^n to + 2^n - 1
Signed 8-bit integers (-128 to 127)
6. int16
Signed 16-bit integers (-32768 to 32767)
7. int32
Signed 32-bit integers (-2147483648 to 2147483647)
8. int64
Signed 64-bit integers (-9223372036854775808 to 9223372036854775807)


Floating: 0
1. float32
IEEE-754 32-bit floating-point numbers
2. float64
IEEE-754 64-bit floating-point numbers


Complex:
1. complex64  0+0i
Complex numbers with float32 real and imaginary parts
2. complex128   0+0i
Complex numbers with float64 real and imaginary parts


Other Numeric Types
1. byte
same as uint8 or // alias for uint8
2. rune    
same as int32  # // alias for int32 represents a Unicode code point
3. uint
32 or 64 bits
4. int
same size as uint
5 uintptr
an unsigned integer to store the uninterpreted bits of a pointer value




string :  empty string ((which is a slice of byte or uint8 values))
array
slice
map
struct
interface
pointer
Function
Channel
error :  nil
Error data type. It is be used to store error value.


## 1. Declaring a variable
var variableName dataType = initialValue

var integer1 int = 15
var integer2 int8 = -25
var integer3 int32 // default 0
var float1 float32 = 63.2
var string1 string = "Hello World!"
var boolean1 bool // default false
var boolean2 bool = true

## 2. Declaring a variable
var variableName dataType
var num int

#Note
initialValue is optional. If you do not give an initial value in the variable assignment, it will hold the zero-value of its data type.

1. if there is any variable declared in the function and if it is not used any where , system will throw error
(c declared and not used)


## Variable assignment

variableName = newvalue
integer1 = -15
integer2 = 25
integer3 = 965
float1 = -52.99
string1 = "Hello There :)"
boolean1 = true
boolean2 = false

Invalid string:
'Hellob World!'
"""Hellob 
	World!""" 
"""Kapil"""
	

Valid String:
"Hellob World!"
`Hi
	Kapil
	`

## Variable name convention
Go recommends writing variable names in simple word or camelCase. Even under_score variable names are valid, they are not idiomatic.


## 3. Type Inference
Even when Go is statically typed language, Go provides us the ease to eliminate declaration of data type while declaring a variable. You can drop data type from variable declaration like below

var variableName = initialValue

var integer1 = 52 // int
var string1 = "Hello World" // string
var boolean1 = false // bool

Go will infer the data type from the most-suitable data type of initialValue. This is generally termed as the Type Inference.

## 4. Short-hand notation
Go also provide a shorthand syntax to declare a variable. In this syntax, you can drop var and dataType.
variableName := initialValue

Go when finds := assignment syntax, it understands that a new variable needs to be declared with an initial value. Hence, you can’t use this syntax to assign a value to a pre-defined variable.

integer1 := 52 //int
string1 := "Hello World" //string
boolean1 := false //bool

1. The shorthand notation syntax := can only be used inside a function body.
b := 3 // syntax error: non-declaration statement outside function body
func main(){
fmt.Print(b)
}

2. it can only be used when at least one of the variables on the left side of := is newly declared.
func main{
	var a, b int
	a = 2
	a,b,c := 5,6,7
	fmt.Println(a)
	fmt.Println(b)
	fmt.Println(c)
}

func main{
	var a, b, c int
	a = 2
	b = 2
	a,b,c := 5,6,7 # no new variables on left side of :=
	fmt.Println(a)
	fmt.Println(b)
	fmt.Println(c)
}

3. Shorthand syntax will come in handy when the value of a variable is assigned at runtime and the data type of the value is not known beforehand. For example, a value received from a function call (example below).
import (
	"fmt"
	"math"
)
func main() {
	a, b := 145.8, 543.8
	c := math.Min(a, b)
	fmt.Println("The minimum value is ", c)
}
4. With the help of short variable declaration operator(:=) you can only declare the local variable which has only block-level scope.

## Multiple variable declarations
var var1, var2, var3 int
var var1, var2, var3 int = 1, 2, 3
var var1, var2, var3 = 1, 2.2, false
var1, var2, var3 := 1, 2.2, false

var (
    var1        = 50
    var2        = 25.22
    var3 string = "Telefonía"
    var4 bool
)

Important Points about var keyword:

During the declaration of the variable using var keyword, you can either remove type or = expression but not both. If you will do, then the compiler will give an error.
If you removed the expression then the variable will contain the zero-value for numbers and false for booleans “” for strings and nil for interface and reference type by default. So, there is no such concept of an uninitialized variable in Go language.

## Type conversion (Type Casting)
In Go, you can not perform add or subtract (or any arithmetic) operations on variables to two different data types. Hence variables first must be converted to the same data type.

var1 := 10 // int
var2 := 10.5 // float64
// illegal
// var3 := var1 + var2
// legal
var3 := var1 + int(var2) // var3 => 20

If you have a string (which is a slice of byte or uint8 values), you can convert it to a different integer data type using []type() syntax.

var1 := "Hello"
var2 := []int32(var1) / [72 101 108 108 111]


## 1. Defining a type (Derived Type)
You create a new derived type from any built-in or user-defined type using type keyword.

type newType fromType

In the above syntax, newType is a new type derived from the fromType. The newType has all the properties of the fromType, however, now we can add additional properties on it without modifying fromType.
You can assign any fromType value to a newType variable or constant, however, fromType and newType types are not comparable since they are two different types. But we can use type conversion to convert the value fromType to newType and vice-versa.

type float float64

package main
import "fmt"
type float float64

func main() {
	var f float = 52.2
	fmt.Printf("f has value %v and type %T\n", f, f)
}

Above program prints main.float because float is a custom type and it must belong to a package. 

#Note: 
1. Type can be defined anywhere in the program, like in a function or a condition block.
2. If you define a new type with beginning with a lowercase letter, then it won’t be exported from the package and other packages won’t be able to use it. We will discuss this in packages and modules tutorials.

type float float64
func main() {
	var f float = 52.2
	var g float64 = 52.2
	fmt.Println("f == g", f == g) //invalid operation: f == g (mismatched types float and float64)
}

## 2. Defining a type (Type Alias)
A type alias is an alternative name for an existing type. We define a type alias using the following syntax.

type aliasName = oldType

Note: In the above syntax, the aliasName is an alternative name of the already defined type oldType. Unlike creating a derived type, type alias does not create a new type, it only defines a variable to reference old type.

type float = float64

func main() {
	var f float = 52.2
	var g float64 = 52.2
	fmt.Println("f == g", f == g) // true
}


## Constant
Constant is a variable in Go with a fixed value. Any attempt to change the value of a constant will cause a run-time panic. Constant must be declared with const keyword and an initial value.

const const_name [data_type] = fixed_value
const PI float32 = 3.14
data_type is optional as go will infer data type from fixed_value.

# Note:
In Go, constant value must be known during compile time. If you are trying to assign value returned by a function call, that won’t work. const a = math.Sqrt(4) is an illegal statement as value of a is computed during run time.
It cannot be declare using := syntax.

# Multiple constants declaration
Like variables, multiple constants can be declared in one statement.
const const_1, const_2 = value_1, value_2
const a, b = 1, 2

const (
    const_1 = value_1
    const_2 = value_2
)

# 1. In a parenthesized const declaration, expressions can be implicitly repeated -this indicates a repetition of the preceding expression.
const (
	a = 1 // a == 1
	b = 2 // b == 2
	c     // c == 2
	d     // d == 2
)

# 2. The iota expression (Can be used only in const)
Go provides a keyword iota that can be used when declaring enumerated constants. This keyword yields an incremented value by 1 starting from 0, each time it is used.
const (
    a = iota // a == 0
    b = iota // b == 1
    c = iota // c == 2
    d        // d == 3 (implicitely d = iota)
)

# 3. Use _ (blank identifier) to skip a value. 
_ will receive the value of iota + 1 but will save the value in the garbage scope.
const (
	a = iota + 1 // a == 1
	_            // (implicitly _ = iota + 1 )
	b            // b == 3 (implicitly b = iota + 1 )
	c            // c == 4 (implicitly c = iota + 1 )
)

# 4. can be declare in local or global scope
One crucial to remember here is that, iota can only be used with variables defined with const. iota will always return an integer of type int. The scope of iota is restricted to the const block.

const a = iota // 0
const b = iota // 0
const (
  c = iota // 0
  d = iota // 1
)
const (
  e = iota // 0
  f = iota // 1
)


## Numeric Expressions
var a = 11/2 // a == 5
This happens as both operands hold data type of int. If you change any of the operand’s data type to float32, the result will be a float32 value.
var a = 11.0/2 // 5.5 (float64)
var b = float32(11)/2 // 5.5 (float32)


Local Variables
Variables that are declared inside a function or a block are termed as Local variables. 
A variable which is declared inside a loop body will not be visible to the outside of loop body.

Global Variables
The variables which are defined outside of a function or a block is termed as Global variables.
These are available throughout the lifetime of a program.
These are declared at the top of the program outside all of the functions or blocks.

Note: What will happen there exists a local variable with the same name as that of the global variable inside a function?

The answer is simple i.e. compiler will give preference to the local variable. Usually when two variable with the same name is defined then the compiler produces a compile-time error. But if the variables are defined in different scopes then the compiler allows it. Whenever there is a local variable defined with the same name as that of a global variable then the compiler will give precedence to the local variable.

var myvariable1 int = 100 
  
func main() { 
var myvariable1 int = 200  
fmt.Printf("The value of myvariable1 is : %d\n",  
                    myvariable1)                 
}

Blank identifier:
As you know, Golang is more concise and readable programming language so it doesn’t allow the programmer to define an unused variable if you do such, then the compiler will throw an error.

The real use of Blank Identifier comes when a function returns multiple values, but we need only a few values and want to discard some values. Basically, it tells the compiler that this variable is not needed and ignored it without any error. It hides the variable’s values and makes the program readable. So whenever you will assign a value to Bank Identifier it becomes unusable.

func mul_div(n1 int, n2 int) (int, int) { 
    return n1 * n2, n1 / n2 
}
    mul, div := mul_div(105, 7) 
    fmt.Println("105 x 7 = ", mul) // ./prog.go:15:7: div declared and not used

mul, _ := mul_div(105, 7)

Important Points:

1. You can use multiple Blank Identifier in the same program. So you can say a Golang program can have multiple variables using the same identifier name which is the blank identifier.
2. There are many cases that arise the requirement of assignment of values just to complete the syntax even knowing that the values will not be going to be used in the program anywhere. Like a function returning multiple values. Mostly blank identifier is used in such cases.
3. You can use any value of any type with the Blank Identifier.




There are total 25 keywords present in the Go language as follows:

break
case
chan
const
continue
default
defer
else
fallthrough
for
func
go
goto
if
import
interface
map
package
range
return
select
struct
switch
type
var

Basic type: Numbers, strings, and booleans come under this category.
Aggregate type: Array and structs come under this category.
Reference type: Pointers, slices, maps, functions, and channels come under this category.
Interface type

Operators:
1. Arithmetic Operators: +, -, *, /, %
2. Relational Operators: ==, !=, >, <, <=, >=
3. Logical Operators: &&, ||, !
4. Bitwise Operators: &, |, ^, <<, >>, &^ (and not)
5. Assignment Operators: =, +=, -=, *=, /=, %=, &=, |=, ^=
6. Misc Operators: & address of operator, * dereferencing operator, <- (channel)

Note: -, +, !, &, *, <-, and ^ are also known as unary operators and the precedence of unary operators is higher. ++ and — operators are from statements they are not expressions, so they are out from the operator hierarchy.
